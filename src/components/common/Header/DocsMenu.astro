---
interface Props {
  items: {
    label: string;
    link?: string;
  }[];
}

const { items } = Astro.props;
const getVersion = (pathname) => {
  if (!pathname.startsWith('/docs/')) return '';
  if (pathname.startsWith('/docs/ebook')) return '';
  const regex = /\/docs\/([^\/]*)/;
  const match = pathname.match(regex);
  // next v1 v2
  const result = match?.[1] || '';
  return ['next', 'v1', 'v2'].includes(result) ? result : 'latest';
}

const currentVersion = getVersion(Astro.url.pathname);

---

<dropdown-docs class="dropdown-docs block">
  <ul class="w-[9.25rem] list-none m-0 bg-gray-13 p-2 rounded-lg">
    {
      items.map((item) => {
        const { label, link } = item;
        const version = getVersion(link);
        const isCurrent = version === currentVersion;
        return (
          <li class={`no-underline cursor-pointer my-1 rounded-lg ${isCurrent ? 'bg-gray-12' : ''} hover:bg-gray-12`}>
            <a 
              href={link}
              class="inline-block w-full p-2 no-underline text-inherit text-gray-02" 
            >
              {label}
            </a>
          </li>
        )
      })
    }
  </ul>
</dropdown-docs>

<script>
  class DocsDrop extends HTMLElement {
    constructor() {
      super();
    }

  }
  customElements.define("dropdown-docs", DocsDrop);
</script>
