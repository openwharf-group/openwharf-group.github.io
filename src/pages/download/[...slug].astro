---
import { getCollection } from 'astro:content';
import BaseLayout from "@layouts/BaseLayout.astro"

export async function getStaticPaths() {
  const downloadEntries = await getCollection('download');
  return downloadEntries.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
const frontmatter = entry?.data;

const entries = await getCollection('download');
const menus = entries.map(entry => ({
  slug: entry.slug,
  label: entry.data.title,
  order: entry.data.order,
  href: `/download/${entry.slug}`,
})).sort((a, b) => a.order - b.order);

---

<BaseLayout title={frontmatter.title}>
  <div class="bg-gray-01 h-2"></div>
  <download-layout>
    <div class="download-container flex">
      <div class="download-menu">
        <ul class="top-level">
          {
            menus.map((entry) => (
              <li class="cursor-pointer">
                <a
                  href={entry.href}
                  aria-current={entry.slug}
                  class:list={["large", "flex", "items-center"]}
                >
                  <span>{entry.label}</span>
                </a>
              </li>
            ))
          }
        </ul>
      </div>
      <div class="download-content">
        <article class="prose max-w-none">
          <Content />
        </article>
      </div>
    </div>
  </download-layout>
</BaseLayout>

<script>
  class DownloadLayout extends HTMLElement {
    private currentRoute: string;
    private menus: HTMLElement[];

    constructor() {
			super();
      this.currentRoute = window.location.pathname;
      this.menus = Array.from(this.querySelectorAll<HTMLElement>(
        "a[aria-current]"
      )!);

      this.menuSelectorEffect();

    }

    // 选中效果
    menuSelectorEffect = () => {
      for (let i = 0; i < this.menus.length; i++) {
        const menu = this.menus[i];
        const ariaValue = menu.getAttribute('aria-current') as string;
        if (this.currentRoute.indexOf(ariaValue) !== -1) {
          menu.classList.add('menu-selected');
        } else {
          menu.classList.remove('menu-selected');
        }
      }

    };
  }
  customElements.define("download-layout", DownloadLayout);
</script>


<style>
  .download-container {
    height: calc(100vh - 4.5rem);
  }
  .download-menu {
    width: 18.75rem;
    padding: 1rem 1rem;
    border-right: solid 1px #DDDEE4;
  }
	ul {
		list-style: none;
		padding: 0;
	}
	li {
		overflow-wrap: anywhere;
	}
	.large {
    display: block;
		/* border-radius: 0.25rem; */
		text-decoration: none;
    font-size: 0.875rem;
		color: var(--sl-color-gray-2);
		padding: 0.3rem 0.5rem;
		line-height: 1.4;
	}
	.top-level > li + li {
		margin-top: 0.75rem;
	}
	a:hover,
	a:focus {
		color: var(--sl-color-white);
	}

  .menu-selected {
    font-weight: 500;
    color: theme("colors.gray.14");
    background-color: theme("colors.gray.02");
    border-left-style: solid;
    border-left-width: 4px;
    border-left-color: theme("colors.gray.14");
    padding-left:  0.625rem !important;
  }

  .download-content {
    width: 100%;
    padding: 1rem 1rem 2rem;
    overflow: auto;
  }

</style>
